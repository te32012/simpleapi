basePath: /
consumes:
    - application/json
definitions:
    actor:
        description: name, data of birthday, sex
        properties:
            dataofbirthday:
                description: data of birthday of actor
                example: 01-01-1999
                format: date-time
                type: string
                x-go-name: DataOfBirthday
            films:
                description: List films of actor
                items:
                    $ref: '#/definitions/film'
                type: array
                x-go-name: Films
            id:
                description: id actor int database or in query (different)
                format: int64
                type: integer
                x-go-name: Id
            name:
                description: Name of actor
                example: jon
                type: string
                x-go-name: Name
            sex:
                description: Sex of actor (male or female only)
                example: male
                type: string
                x-go-name: Sex
        required:
            - name
            - sex
            - dataofbirthday
        title: struct of actor
        type: object
        x-go-name: Actor
        x-go-package: vktestgo2024/internal/entity
    connection:
        properties:
            actor:
                $ref: '#/definitions/actor'
            film:
                $ref: '#/definitions/film'
        type: object
        x-go-name: RequestEditConnection
        x-go-package: vktestgo2024/internal/entity
    editactor:
        properties:
            newactor:
                $ref: '#/definitions/actor'
            oldactor:
                $ref: '#/definitions/actor'
        type: object
        x-go-name: RequestEditActor
        x-go-package: vktestgo2024/internal/entity
    editfilm:
        properties:
            newfilm:
                $ref: '#/definitions/film'
            oldfilm:
                $ref: '#/definitions/film'
        type: object
        x-go-name: RequestEditFilm
        x-go-package: vktestgo2024/internal/entity
    film:
        description: film with name, description and data of realease
        properties:
            about:
                description: Information about film
                example: good film
                minLength: 1
                type: string
                x-go-name: About
            actors:
                description: List of actor in this film
                items:
                    $ref: '#/definitions/actor'
                type: array
                x-go-name: Actors
            id:
                description: id film int database or in query (different)
                example: 1
                format: int64
                type: integer
                x-go-name: Id
            name:
                description: Name of film
                example: alive
                type: string
                x-go-name: Name
            rating:
                description: Raiting of actor
                example: 4
                format: int64
                type: integer
                x-go-name: Rating
            releasedate:
                description: Information realease data
                example: 02-01-1999
                format: date-time
                type: string
                x-go-name: ReleaseDate
        required:
            - name
            - about
            - releasedate
            - rating
        title: struct of films
        type: object
        x-go-name: Film
        x-go-package: vktestgo2024/internal/entity
host: vktestgo2024
info:
    contact:
        email: vana0pub2@gmail.com
        name: Ivan Korotkii
        url: https://t.me/m_i_k_r_o_b
    description: |-
        the purpose of this application is to provide an application
        that is using plain go code to define an API

        This should demonstrate all the possible comment annotations
        that are available to turn go code into a fully compliant swagger 2.0 spec
    license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    termsOfService: there are no TOS at this moment, use at your own risk we take no responsibility
    title: Petstore API.
    version: 0.0.1
paths:
    /addActor:
        post:
            consumes:
                - application/json
            operationId: addActor
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: create actor without id and list of films in database
                  in: body
                  name: actor
                  required: true
                  schema:
                    $ref: '#/definitions/actor'
                    description: create actor without id and list of films in database
                    type: object
            responses:
                "200":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: Added one actor in base
    /addConnectionBetweenActorAndFilm:
        post:
            consumes:
                - application/json
            operationId: addConnectionBetweenActorAndFilm
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: film and actor data
                  in: body
                  name: connection
                  required: true
                  schema:
                    $ref: '#/definitions/connection'
                    description: film and actor data
                    type: object
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: added information that actor was in film
    /addFilm:
        post:
            consumes:
                - application/json
            operationId: addFilm
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: create film in database
                  in: body
                  name: film
                  required: true
                  schema:
                    $ref: '#/definitions/film'
                    description: create film in database
                    type: object
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: add one film
    /addFilmWithActor:
        post:
            consumes:
                - application/json
            operationId: addFilmWithActor
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: create film in database
                  in: body
                  name: film
                  required: true
                  schema:
                    $ref: '#/definitions/film'
                    description: create film in database
                    type: object
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: add one film
    /deleteActor:
        post:
            consumes:
                - application/json
            operationId: deleteActor
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: delete this actor from base
                  in: body
                  name: actor
                  required: true
                  schema:
                    $ref: '#/definitions/actor'
                    description: delete this actor from base
                    type: object
            responses:
                "200":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: delete one actor
    /deleteConnectionBetweenActorAndFilm:
        post:
            consumes:
                - application/json
            operationId: deleteConnectionBetweenActorAndFilm
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: film and actor data
                  in: body
                  name: connection
                  required: true
                  schema:
                    $ref: '#/definitions/connection'
                    description: film and actor data
                    type: object
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: delete information that actor was in film
    /deleteFilm:
        post:
            consumes:
                - application/json
            operationId: deleteFilm
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: film for deleting
                  in: body
                  name: film
                  required: true
                  schema:
                    $ref: '#/definitions/film'
                    description: film for deleting
                    type: object
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: delete one film
    /editActor:
        post:
            consumes:
                - application/json
            operationId: editActor
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: old and new actor
                  in: body
                  name: requestedit
                  required: true
                  schema:
                    $ref: '#/definitions/editactor'
                    description: old and new actor
                    type: object
            produces:
                - application/json
            responses:
                "200":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: Edit one actor
    /editFilm:
        post:
            consumes:
                - application/json
            operationId: editFilm
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: old and new data film
                  in: body
                  name: requesteditfilm
                  required: true
                  schema:
                    $ref: '#/definitions/editfilm'
                    description: old and new data film
                    type: object
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: edit one film
    /findInFilm:
        post:
            consumes:
                - application/json
            operationId: findInFilm
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: pattern for search
                  in: header
                  name: segment
                  required: true
                  type: string
            responses:
                "200":
                    description: film
                    schema:
                        items:
                            $ref: '#/definitions/film'
                        type: array
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: find film by fultext search by name actor or by name film
    /getActors:
        post:
            operationId: getActors
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
            produces:
                - application/json
            responses:
                "200":
                    description: list of actors in json format
                    schema:
                        items:
                            $ref: '#/definitions/actor'
                        type: array
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: Get all actors with films
    /getListFilms:
        post:
            consumes:
                - application/json
            operationId: getListFilms
            parameters:
                - description: current session of user (we can use some computers in one time for one user)
                  in: header
                  name: session
                  required: true
                  type: string
                - description: colum for sorting
                  in: header
                  name: keysort
                  type: object
                - description: by increase or by decrease sorting anser
                  in: header
                  name: ordersort
                  type: object
            responses:
                "200":
                    description: film
                    schema:
                        items:
                            $ref: '#/definitions/film'
                        type: array
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: get list films
    /login:
        post:
            operationId: login
            parameters:
                - description: username of user
                  in: header
                  name: login
                  required: true
                  type: string
                - description: password of user without hasing
                  format: password
                  in: header
                  name: password
                  required: true
                  type: string
            responses:
                "200":
                    description: ""
                "400":
                    description: ""
                "405":
                    description: ""
                "500":
                    description: ""
            summary: Sing in user and answer session
    /ping:
        post:
            operationId: ping
            responses:
                "200":
                    description: ""
                "405":
                    description: ""
            summary: Cheking that server is working/stopping
produces:
    - application/json
    - text/html
schemes:
    - http
swagger: "2.0"
